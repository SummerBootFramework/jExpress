-- release 2.6.1

- enhanced logging: log detailed information and stack trace health check failure
- enhanced logging and Config new: cfg_nio.properties/
    ######################################
    # 5. IO Communication logging filter #
    ######################################
    ## Show channel exception in the log, default=true, false value will be ignored if app starts with -debug
    ## Set to false to avoid showing channel exception in log, this is useful when you have a lot of channel exceptions and want to reduce the noise in the log
    #nio.verbose.logChannelException=true


Maven Central Repository:
https://repo.maven.apache.org/maven2/org/summerboot/jexpress/2.6.1/
https://central.sonatype.com/artifact/org.summerboot/jexpress/2.6.1

mvnrepository.com:
https://mvnrepository.com/artifact/org.summerboot/jexpress/2.6.1


-- release 2.6.0
- enhanced security 1: this change use enhanced encryption/decryption to protect sensitive data, like password in config files.
	The 2.5.2 cannot read the current encrypted data by 2.5.1
	it requires the app with 2.5.1 to decrypt to DEC, or deploy with DEC
	to decrypt: java -jar your-app.jar -decrypt -auth <root password> [-domain <your domain>]
			or: java -jar your-app.jar -decrypt -authfile <path to root password file> [-domain <your domain>]
- enhanced security 2: default master password is no longer hardcoded, it will be loaded from etc/master.password file (auto create if no exists) when "-authfile <path to master.password>" is not provided to launch the app
- enhanced security 3: HTTP server supports caller address filter with regex precheck
- enhanced security 4: gRPC server supports caller address filter with regex precheck
- enhanced security 5: added @Log.maskDataFields and refactoring FormatterUtil.replaceDataField to protect data not only in JSON format but also for sanitized JON, XML, sanitized XML and Form data.
- enhanced security 6: fixed CWE-117, 331, 338, 327. 73, 90 flaws, also verified and marked false positive CWE flaws.
- enhanced security 7: replace JKS with PKCS12
- upgrade to Netty 4.2.x
- refactoring CLI exit code

- API new: added @UniqueIgnore to mute @Unique check alert for expected duplicated values
- API new: added @Inspector.name and @Daemon.requiredHealthChecks (array of @Inspector.names, empty/null means ignore all HealthChecks)
	this is to set Controller and/or its methods on daemon mode (accessable when pause/health failed but not for specified @Inspector.name

- API renamed: @Controller.implTag renamed to @Controller.AlternativeName
- API renamed: @Service.implTag renamed to with @Service.AlternativeName
- API renamed: @Log.hideJsonStringFields, hideJsonNumberFields and hideJsonArrayFields all renamed to with @Log.maskDataFields
- API renamed: org.summerboot.jexpress.nio.server.domain.ServiceContext renamed to org.summerboot.jexpress.nio.server.SessionContext
- API renamed: @ImportResource.checkImplTagUsed renamed to @ImportResource.whenUseAlternative
- API renamed: @ImportResource.loadWhenImplTagUsed renamed to @ImportResource.thenLoadConfig
- Config removed: etc/boot.ini/default.interval.ConfigChangeMonitor
- Config new: etc/boot.ini
    #######################
    # 3. Default Settings #
    #######################
	#default.ConfigChangeMonitor.Throttle.Milliseconds=100

	#####################################################
    # 5.1 Security Settings: keystore type and provider #
    #####################################################
    ## keystore type for SSL/TLS, valid values: PKCS12 (default), PKCS11, JCEKS , JKS, BCFKS
    #keystore.type=PKCS12

    ## keystore provider for SSL/TLS, valid values: null=JDK default, BC (BouncyCastle), SunJSSE, BCFIPS, etc.
    ## Note: BC will not verify the key password, so it is not recommended for production use.
    ## Note: BCFIPS is a FIPS compliant provider, which is required by some government applications.
    #keystore.provider=

    #########################################
    # 5.2 Security Settings: message digest #
    #########################################
    ## SHA3-224, SHA3-256 (default), SHA3-384, SHA3-512, SHA-256, SHA-384, SHA-512, etc.
    ## Note: MD5 and SHA-1 is a broken or risky cryptographic algorithm, see https://en.wikipedia.org/wiki/SHA-3 (section Comparison of SHA functions)
    #algorithm.Messagedigest=SHA3-256

    ###################################################################
    # 5.3 Security Settings: asymmetric key (public/private key pair) #
    ###################################################################
    ## Asymmetric key algorithm, valid values: RSA (default), DSA, EC, DiffieHellman, Ed25519, Ed448, etc.
    #algorithm.Asymmetric=RSA

    ## Asymmetric cipher transformation, valid values: RSA/None/OAEPWithSHA-256AndMGF1Padding (default), RSA/ECB/PKCS1Padding, RSA/ECB/OAEPWithSHA-1AndMGF1Padding, RSA/ECB/OAEPWithSHA-256AndMGF1Padding, DSA/None/PKCS1Padding, EC/None/PKCS1Padding, etc.
    ## Note: ryptographic algorithm ECB is weak and should not be usedï¼š RSA/ECB/PKCS1Padding
    #transformation.Asymmetric=RSA/None/OAEPWithSHA-256AndMGF1Padding

    ######################################################
    # 5.4 Security Settings: symmetric key (no password) #
    ######################################################
    ## Symmetric key algorithm, valid values: AES (default), DES, DESede, Blowfish, ARCFOUR, ChaCha20, HmacMD5, HmacSHA1, HmacSHA224, HmacSHA256, HmacSHA384, HmacSHA512, HmacSHA512/224, HmacSHA512/256, HmacSHA3-224, HmacSHA3-256, HmacSHA3-384, HmacSHA3-512, RC2, etc.
    #algorithm.Symmetric=AES

    ## key size in bits for symmetric key generation, algorithms may have different key size requirements.
    #length.SymmetricKey.Bits=256

    ## Symmetric cipher transformation, valid values: AES/GCM/NoPadding (default, for modern applications), AES/CBC/PKCS5Padding (more compatible with older systems), AES/CBC/NoPadding, AES/CTR/NoPadding, AES/CFB/NoPadding, DES/CBC/PKCS5Padding, DESede/CBC/PKCS5Padding, Blowfish/CBC/PKCS5Padding, etc.
    ## Note: do not use AES/CBC, and AES/GCM/PKCS5Padding is no longer supported in Java17 - https://docs.oracle.com/en/java/javase/17/docs/api/java.base/javax/crypto/Cipher.html
    #transformation.Symmetric=AES/GCM/NoPadding

    ## AuthenticationTag size in bits for symmetric key generation, algorithms may have different AuthenticationTag size requirements.
    #length.SymmetricKey.AuthenticationTag.Bits=128

    ## IV size in bits for symmetric key generation, algorithms may have different IV size requirements.
    #length.symmetricKey.InitializationVector.Bytes=12

    #####################################################
    # 5.5 Security Settings: secret key (with password) #
    #####################################################
    ## Symmetric key factory generation algorithm, valid values: PBKDF2WithHmacSHA256 (default), PBKDF2WithHmacSHA512, PBKDF2WithHmacSHA1, etc.
    #algorithm.SecretKey=PBKDF2WithHmacSHA256

    ## key size in bits for symmetric key generation, algorithms may have different key size requirements.
    #length.algorithm.SecretKey.Bits=256

    ## salt size in bytes for symmetric key generation, algorithms may have different salt size requirements.
    #length.algorithm.SecretKey.Salt.Bits=16

    ## for symmetric key generation, algorithms may have different iteration requirements.
    #count.algorithm.SecretKey.iteration=310000


- Config new: cfg_nio.properties/
	ping.sync.HealthStatus.requiredHealthChecks
	ping.sync.PauseStatus
	ping.sync.showRootCause
	nio.WebSocket.Compress.maxAllocation
	nio.JAX-RS.fromJson.autoBeanValidation (default true to enable Bean Validation by default for @Controller methods, no need to add @Valid)
	nio.JAX-RS.toJson.showRefInServiceError
- Config renamed: DB config use jakarta to replace hibernate
	jakarta.persistence.jdbc.url=
	jakarta.persistence.jdbc.user=
	jakarta.persistence.jdbc.password=DEC(changeit)
	jakarta.persistence.jdbc.driver=com.mysql.jdbc.Driver
- enhancement: replace space with _ in log file name
- added app CLI -debug for debug mode
- enhancement: add IdleEventMonitor and IdleEventMonitor.IdleEventListener to enable app to handle gRPC/RESTFul idel event
- enhancement: HttpClient proxy config
- enhancement: refactoring RPCResult
    1. supporting multiple error response types
    2. enable Bean Validation by default
- enhancement: enable Bean Validation by default for @Controller methods, no need to add @Valid
- enhancement: Err with args
- enhancement: add nio.JAX-RS.toJson.showRefInServiceError in cfg_nio.properties, default false to not show ref field in JSON/XML response
- enhancement: verify Bearer Token if provided in request header for regardless of a @Controller method is role-based or not
- enhancement: added GrpcTestBase for gRPC test (usage and example see https://github.com/SummerBootFramework/jExpressDemo-HelloSummer/blob/main/HelloSummer-demo02/src/test/java/test/integration/grpc/GrpcTest.java)
	2-way TLS (server and client verify each other certificate)
	client verify server certificate, server trust all client certificate
	server verify server certificate, client trust all client certificate
	server and client trust all certificates
	server does NOT trust client certificate, client trust server certificate, this will fail with StatusRuntimeException (UNAVAILABLE: ssl exception)
	client does NOT trust server certificate, server trust server certificate, this will fail with StatusRuntimeException (UNAVAILABLE: io exception)

Maven Central Repository:
https://repo.maven.apache.org/maven2/org/summerboot/jexpress/2.6.0/
https://central.sonatype.com/artifact/org.summerboot/jexpress/2.6.0

mvnrepository.com:
https://mvnrepository.com/artifact/org.summerboot/jexpress/2.6.0



-- release 2.5.1 --
- replaced String.format(0x%02X, i) with better performance api, 100 times faster via byte operations: 10k loads performace: 317ms vs 2ms
- @Config added boolean trim (default=true) falag to allow configuration items to keep space when set trim=false



-- release 2.5.0 --
- Virtual Thread, and the four (VirtualThread, CPU, IO, Mixed) mode are supported in the configuration file for HTTP server, HTTP client, gRPC server and BackOffice



-- release 2.4.18 --
- BootController.login will call preLogin() and postLogin() before and after signing JWT


-- release 2.4.17 --
- backward compatible with JWT and configurable in etc/boot.ini

-- release 2.4.16 --
- change BootJobListener log level to DEBUG (configurable in etc/boot.conf section 4.2 naming.log4j2.jboListenerLogLevel)
- ServiceContext.reset() renamed to resetResponseData(), it only reset response data, not status


-- release 2.4.13 --
- BootHttpFileUploadHandler<T>.T onFileUploaded() accepts return object T
- enhanced HealthMonitor with email alert
- enhanced logging
- repleace Glassfish EL impl with Tomcat Embed EL
- enhanced GRPC client, support dynamic configuration change
- enhanced email alert and logging
- migrate to jjwt 0.12


-- release 2.4.10 --
- fixed: rename config file will pause/resume service
- added CLI: -psv <envId>
- refactor: BootHttpFileUploadHandler
- HttpClient: remotet Http response status will not be set to the response status of ServiceContext
- support ISO9601 offset with no colon
- PingHandler returns 502 Bad Gateway when service paused; 503 Service Unavailable when health check failed
- HealthInspector can set log level and status of pause/healthcheck
- removed BootHealthInspectorImpl.java, replaced with newly added @DefaultHealthInspector
- NioServer only log status on change
- service pause by multiple reasons via password, and can only be resumed by all those reasons via correct password

-- release 2.4.9 --
- enable configurable TimeZone for JSON parser in both Nio and Http config
- afterProcess only get triggered when beforeProcess success

-- release 2.4.8 --
- added ServiceContext.report() and ServiceContext.report(StringBuilder)
- BootCache.debounced() supports TimeUnit

-- release 2.4.7 --
- added afterService() into HttpLifecycleListener, called after sending response to client, before starting logging

-- release 2.4.6 --
- recognize LocalDate as JAX-RS parameter type

-- release 2.4.5 --
- Refactoring: SummerInitializer init before and after Ioc is initialized
- Enhancement: Reject with 503 asap when paused or health check failed, unless @Controller or its method has @Daemon

-- release 2.4.4 --
- Enhancement: command line arguments end with /r bu mistake in service script no longer impact application

-- release 2.4.3 --
- Fixed: version updated
- Enhancement: generateTemplate follow parent first order
- Refactoring: HTTP Client classes moved to org.summerboot.jexpress.integration.httpclient
- New: Release MQTT client to public


-- release 2.4.2 --
- support multiple @Ping
- Config ObjectMapper with timezone specified in etc/boot.ini#backoffice.jsonParser.TimeZone
- enhanced error handling: Http decoder failed (error code 11) and File download
- enhanced @FormParam processing
- Other than j_security_check, also support POST ${context-root}/login with JSON request in BootController {"username" : "value", "password" : "value"}
- let controller layer to handle LDAP escape
- log both raw and decoded uri
- refactor lifecycle/exception listeners/handlers to org.summerboot.jexpress.boot.event


-- release 2.4.1 --
- enabled @jakarta.validation.constraints.Pattern for RESTFul api parameters: PathParam, MatrixParam, QueryParam, FormParam, HeaderParam and CookieParam
- fixed: cli -decrypt generate cfg_grpc.properties even there is no gRPC impl
- log trace enable on org.summerboot.jexpress.nio.server.BootHttpRequestHandler will override @org.summerboot.jexpress.boot.annotation.Log settings to log all request and response
- reformat java source code via IDEA default formatter

-- release 2.3.13 --
- added etc/boot.ini: log.traceWithSystemOut (default = false)
- Application start with log trace
- auto generate tem dir for file uploading
- show internal error message in the log

-- release 2.3.12 --
- enabled customized delimiter of collection in @Config with new collectionDelimiter field
- enhanded logging: ServiceErrorã€‚ref changed to String from long: replace hit with transaction id (server session id + hit)
- Monthly security patch

-- release 2.3.11 --
- no internal error will be send to client
- @Scheduled support dynamic config via specifiing a private static field
- Monthly security patch


-- release 2.3.10 --
HealthMonitor will send email alert when status changed without debouncing
HealthMonitor will send email alert when inspection failed with debouncing


-- release 2.3.9 --
TPE with name thread pool by NamedDefaultThreadFactory
supports org.quartz with @Scheduled
supports org.quartz with Guice IoC
supports org.quartz with Guice @Singleton
supports logId
refactor changeit to Constant


-- release 2.3.8 --
BootAuthenticator<T> implements Authenticator, ServerInterceptor to suport gRPC jwt with same logic as Web server
fixed gRPC jwt is reqired by ServerInterceptor issue
fixed gRPC client overrideAuthority issue:
	1. certificates with no Subject Alternative Names (SAN) caused gRpc.client.ssl.overrideAuthority not working, because SAN empty will dnsName is empty string as "" in sun.security.utilã€‚HostnameCheckerã€‚matchDNSï¼ˆï¼‰
	2. BootLoadBalancerProvider.authority is the remote server DNS name, cannot use CSV format

throw UnsupportedOperationException when LDAP or JWT is not configured
hide cause from sending to client
fixed duplicated @Ping error message showing default Ping
added etc/boot.conf to enable user to override boot error codes
support multiple callerRootPackageNames
Added TimeoutAlert to catch entropy issue (cat /dev/random)
Fixed NioCinfig load docrootDir with double "run/run" when run from current root folder
added ServiceContext.file(String)
JWT TTL can be overriden by Caller
NioHttpUtil.WebResourceCache as SimpleLocalCacheImpl


-- release 2.3.7 --
empty configuration value in config file will result field value = null
clean up GRPCServerConfig
clean up NioCinfig
json/xml request will not receive html error when webresource is enabled
move template files to org/summerboot/jexpress/template/
generate jwt_public.key and jwt_private.key when auth enabled
refactoring cfg_auth.properties
@Config added predefinedValue
added JPAConfig
cfg_smtp.properties
	mail.smtp.user.displayname replaced mail.smtp.userName
	mail.smtp.user.passwrod repleaced mail.smtp.pwd
fixed @Service(named + implTag) as key cause combination duplicated false alert error
refactored IoC memo
added type to @Service(binding = ChannelHandler.class, type=)
create configuration folder is not exists

TODO: JSR356


-- release 2.3.6 --
auto-generate http error page by status code when running as web server
enabled testing with programmably start/shut server multiple times
enabled auto-start NIO service via cfg
enabled auto-start gRPC service via cfg
enabled gRPC server binding on multiple NICs
enabled gRPC with Bearer token
enabled gRPC client side load balancing
added SocketAddress as config type
call SummerRunner.run befroe HealthInspector.ping()

fixed JMX shutdown issue
fixed web server cannot handle invalid file name issue
fixed multi-binding-binding duplicated key issue
fixed password contains () issue
